// Code generated by counterfeiter. DO NOT EDIT.
package apihelperfakes

import (
	"sync"

	"github.com/jtuchscherer/usagereport-plugin/apihelper"
)

type FakeCFAPIHelper struct {
	GetOrgsStub        func() ([]apihelper.Organization, error)
	getOrgsMutex       sync.RWMutex
	getOrgsArgsForCall []struct{}
	getOrgsReturns     struct {
		result1 []apihelper.Organization
		result2 error
	}
	getOrgsReturnsOnCall map[int]struct {
		result1 []apihelper.Organization
		result2 error
	}
	GetOrgStub        func(string) (apihelper.Organization, error)
	getOrgMutex       sync.RWMutex
	getOrgArgsForCall []struct {
		arg1 string
	}
	getOrgReturns struct {
		result1 apihelper.Organization
		result2 error
	}
	getOrgReturnsOnCall map[int]struct {
		result1 apihelper.Organization
		result2 error
	}
	GetQuotaMemoryLimitStub        func(string) (float64, error)
	getQuotaMemoryLimitMutex       sync.RWMutex
	getQuotaMemoryLimitArgsForCall []struct {
		arg1 string
	}
	getQuotaMemoryLimitReturns struct {
		result1 float64
		result2 error
	}
	getQuotaMemoryLimitReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	GetOrgMemoryUsageStub        func(apihelper.Organization) (float64, error)
	getOrgMemoryUsageMutex       sync.RWMutex
	getOrgMemoryUsageArgsForCall []struct {
		arg1 apihelper.Organization
	}
	getOrgMemoryUsageReturns struct {
		result1 float64
		result2 error
	}
	getOrgMemoryUsageReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	GetOrgSpacesStub        func(string) ([]apihelper.Space, error)
	getOrgSpacesMutex       sync.RWMutex
	getOrgSpacesArgsForCall []struct {
		arg1 string
	}
	getOrgSpacesReturns struct {
		result1 []apihelper.Space
		result2 error
	}
	getOrgSpacesReturnsOnCall map[int]struct {
		result1 []apihelper.Space
		result2 error
	}
	GetSpaceAppsStub        func(string) ([]apihelper.App, error)
	getSpaceAppsMutex       sync.RWMutex
	getSpaceAppsArgsForCall []struct {
		arg1 string
	}
	getSpaceAppsReturns struct {
		result1 []apihelper.App
		result2 error
	}
	getSpaceAppsReturnsOnCall map[int]struct {
		result1 []apihelper.App
		result2 error
	}
	GetServicesStub        func([]string) ([]apihelper.Service, error)
	getServicesMutex       sync.RWMutex
	getServicesArgsForCall []struct {
		arg1 []string
	}
	getServicesReturns struct {
		result1 []apihelper.Service
		result2 error
	}
	getServicesReturnsOnCall map[int]struct {
		result1 []apihelper.Service
		result2 error
	}
	GetServicePlansStub        func(string) ([]apihelper.ServicePlan, error)
	getServicePlansMutex       sync.RWMutex
	getServicePlansArgsForCall []struct {
		arg1 string
	}
	getServicePlansReturns struct {
		result1 []apihelper.ServicePlan
		result2 error
	}
	getServicePlansReturnsOnCall map[int]struct {
		result1 []apihelper.ServicePlan
		result2 error
	}
	GetSpaceServiceInstancesStub        func(string) ([]apihelper.ServiceInstance, error)
	getSpaceServiceInstancesMutex       sync.RWMutex
	getSpaceServiceInstancesArgsForCall []struct {
		arg1 string
	}
	getSpaceServiceInstancesReturns struct {
		result1 []apihelper.ServiceInstance
		result2 error
	}
	getSpaceServiceInstancesReturnsOnCall map[int]struct {
		result1 []apihelper.ServiceInstance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFAPIHelper) GetOrgs() ([]apihelper.Organization, error) {
	fake.getOrgsMutex.Lock()
	ret, specificReturn := fake.getOrgsReturnsOnCall[len(fake.getOrgsArgsForCall)]
	fake.getOrgsArgsForCall = append(fake.getOrgsArgsForCall, struct{}{})
	fake.recordInvocation("GetOrgs", []interface{}{})
	fake.getOrgsMutex.Unlock()
	if fake.GetOrgsStub != nil {
		return fake.GetOrgsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgsReturns.result1, fake.getOrgsReturns.result2
}

func (fake *FakeCFAPIHelper) GetOrgsCallCount() int {
	fake.getOrgsMutex.RLock()
	defer fake.getOrgsMutex.RUnlock()
	return len(fake.getOrgsArgsForCall)
}

func (fake *FakeCFAPIHelper) GetOrgsReturns(result1 []apihelper.Organization, result2 error) {
	fake.GetOrgsStub = nil
	fake.getOrgsReturns = struct {
		result1 []apihelper.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgsReturnsOnCall(i int, result1 []apihelper.Organization, result2 error) {
	fake.GetOrgsStub = nil
	if fake.getOrgsReturnsOnCall == nil {
		fake.getOrgsReturnsOnCall = make(map[int]struct {
			result1 []apihelper.Organization
			result2 error
		})
	}
	fake.getOrgsReturnsOnCall[i] = struct {
		result1 []apihelper.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrg(arg1 string) (apihelper.Organization, error) {
	fake.getOrgMutex.Lock()
	ret, specificReturn := fake.getOrgReturnsOnCall[len(fake.getOrgArgsForCall)]
	fake.getOrgArgsForCall = append(fake.getOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrg", []interface{}{arg1})
	fake.getOrgMutex.Unlock()
	if fake.GetOrgStub != nil {
		return fake.GetOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgReturns.result1, fake.getOrgReturns.result2
}

func (fake *FakeCFAPIHelper) GetOrgCallCount() int {
	fake.getOrgMutex.RLock()
	defer fake.getOrgMutex.RUnlock()
	return len(fake.getOrgArgsForCall)
}

func (fake *FakeCFAPIHelper) GetOrgArgsForCall(i int) string {
	fake.getOrgMutex.RLock()
	defer fake.getOrgMutex.RUnlock()
	return fake.getOrgArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetOrgReturns(result1 apihelper.Organization, result2 error) {
	fake.GetOrgStub = nil
	fake.getOrgReturns = struct {
		result1 apihelper.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgReturnsOnCall(i int, result1 apihelper.Organization, result2 error) {
	fake.GetOrgStub = nil
	if fake.getOrgReturnsOnCall == nil {
		fake.getOrgReturnsOnCall = make(map[int]struct {
			result1 apihelper.Organization
			result2 error
		})
	}
	fake.getOrgReturnsOnCall[i] = struct {
		result1 apihelper.Organization
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetQuotaMemoryLimit(arg1 string) (float64, error) {
	fake.getQuotaMemoryLimitMutex.Lock()
	ret, specificReturn := fake.getQuotaMemoryLimitReturnsOnCall[len(fake.getQuotaMemoryLimitArgsForCall)]
	fake.getQuotaMemoryLimitArgsForCall = append(fake.getQuotaMemoryLimitArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetQuotaMemoryLimit", []interface{}{arg1})
	fake.getQuotaMemoryLimitMutex.Unlock()
	if fake.GetQuotaMemoryLimitStub != nil {
		return fake.GetQuotaMemoryLimitStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getQuotaMemoryLimitReturns.result1, fake.getQuotaMemoryLimitReturns.result2
}

func (fake *FakeCFAPIHelper) GetQuotaMemoryLimitCallCount() int {
	fake.getQuotaMemoryLimitMutex.RLock()
	defer fake.getQuotaMemoryLimitMutex.RUnlock()
	return len(fake.getQuotaMemoryLimitArgsForCall)
}

func (fake *FakeCFAPIHelper) GetQuotaMemoryLimitArgsForCall(i int) string {
	fake.getQuotaMemoryLimitMutex.RLock()
	defer fake.getQuotaMemoryLimitMutex.RUnlock()
	return fake.getQuotaMemoryLimitArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetQuotaMemoryLimitReturns(result1 float64, result2 error) {
	fake.GetQuotaMemoryLimitStub = nil
	fake.getQuotaMemoryLimitReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetQuotaMemoryLimitReturnsOnCall(i int, result1 float64, result2 error) {
	fake.GetQuotaMemoryLimitStub = nil
	if fake.getQuotaMemoryLimitReturnsOnCall == nil {
		fake.getQuotaMemoryLimitReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.getQuotaMemoryLimitReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgMemoryUsage(arg1 apihelper.Organization) (float64, error) {
	fake.getOrgMemoryUsageMutex.Lock()
	ret, specificReturn := fake.getOrgMemoryUsageReturnsOnCall[len(fake.getOrgMemoryUsageArgsForCall)]
	fake.getOrgMemoryUsageArgsForCall = append(fake.getOrgMemoryUsageArgsForCall, struct {
		arg1 apihelper.Organization
	}{arg1})
	fake.recordInvocation("GetOrgMemoryUsage", []interface{}{arg1})
	fake.getOrgMemoryUsageMutex.Unlock()
	if fake.GetOrgMemoryUsageStub != nil {
		return fake.GetOrgMemoryUsageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgMemoryUsageReturns.result1, fake.getOrgMemoryUsageReturns.result2
}

func (fake *FakeCFAPIHelper) GetOrgMemoryUsageCallCount() int {
	fake.getOrgMemoryUsageMutex.RLock()
	defer fake.getOrgMemoryUsageMutex.RUnlock()
	return len(fake.getOrgMemoryUsageArgsForCall)
}

func (fake *FakeCFAPIHelper) GetOrgMemoryUsageArgsForCall(i int) apihelper.Organization {
	fake.getOrgMemoryUsageMutex.RLock()
	defer fake.getOrgMemoryUsageMutex.RUnlock()
	return fake.getOrgMemoryUsageArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetOrgMemoryUsageReturns(result1 float64, result2 error) {
	fake.GetOrgMemoryUsageStub = nil
	fake.getOrgMemoryUsageReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgMemoryUsageReturnsOnCall(i int, result1 float64, result2 error) {
	fake.GetOrgMemoryUsageStub = nil
	if fake.getOrgMemoryUsageReturnsOnCall == nil {
		fake.getOrgMemoryUsageReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.getOrgMemoryUsageReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgSpaces(arg1 string) ([]apihelper.Space, error) {
	fake.getOrgSpacesMutex.Lock()
	ret, specificReturn := fake.getOrgSpacesReturnsOnCall[len(fake.getOrgSpacesArgsForCall)]
	fake.getOrgSpacesArgsForCall = append(fake.getOrgSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgSpaces", []interface{}{arg1})
	fake.getOrgSpacesMutex.Unlock()
	if fake.GetOrgSpacesStub != nil {
		return fake.GetOrgSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getOrgSpacesReturns.result1, fake.getOrgSpacesReturns.result2
}

func (fake *FakeCFAPIHelper) GetOrgSpacesCallCount() int {
	fake.getOrgSpacesMutex.RLock()
	defer fake.getOrgSpacesMutex.RUnlock()
	return len(fake.getOrgSpacesArgsForCall)
}

func (fake *FakeCFAPIHelper) GetOrgSpacesArgsForCall(i int) string {
	fake.getOrgSpacesMutex.RLock()
	defer fake.getOrgSpacesMutex.RUnlock()
	return fake.getOrgSpacesArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetOrgSpacesReturns(result1 []apihelper.Space, result2 error) {
	fake.GetOrgSpacesStub = nil
	fake.getOrgSpacesReturns = struct {
		result1 []apihelper.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetOrgSpacesReturnsOnCall(i int, result1 []apihelper.Space, result2 error) {
	fake.GetOrgSpacesStub = nil
	if fake.getOrgSpacesReturnsOnCall == nil {
		fake.getOrgSpacesReturnsOnCall = make(map[int]struct {
			result1 []apihelper.Space
			result2 error
		})
	}
	fake.getOrgSpacesReturnsOnCall[i] = struct {
		result1 []apihelper.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetSpaceApps(arg1 string) ([]apihelper.App, error) {
	fake.getSpaceAppsMutex.Lock()
	ret, specificReturn := fake.getSpaceAppsReturnsOnCall[len(fake.getSpaceAppsArgsForCall)]
	fake.getSpaceAppsArgsForCall = append(fake.getSpaceAppsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceApps", []interface{}{arg1})
	fake.getSpaceAppsMutex.Unlock()
	if fake.GetSpaceAppsStub != nil {
		return fake.GetSpaceAppsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSpaceAppsReturns.result1, fake.getSpaceAppsReturns.result2
}

func (fake *FakeCFAPIHelper) GetSpaceAppsCallCount() int {
	fake.getSpaceAppsMutex.RLock()
	defer fake.getSpaceAppsMutex.RUnlock()
	return len(fake.getSpaceAppsArgsForCall)
}

func (fake *FakeCFAPIHelper) GetSpaceAppsArgsForCall(i int) string {
	fake.getSpaceAppsMutex.RLock()
	defer fake.getSpaceAppsMutex.RUnlock()
	return fake.getSpaceAppsArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetSpaceAppsReturns(result1 []apihelper.App, result2 error) {
	fake.GetSpaceAppsStub = nil
	fake.getSpaceAppsReturns = struct {
		result1 []apihelper.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetSpaceAppsReturnsOnCall(i int, result1 []apihelper.App, result2 error) {
	fake.GetSpaceAppsStub = nil
	if fake.getSpaceAppsReturnsOnCall == nil {
		fake.getSpaceAppsReturnsOnCall = make(map[int]struct {
			result1 []apihelper.App
			result2 error
		})
	}
	fake.getSpaceAppsReturnsOnCall[i] = struct {
		result1 []apihelper.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetServices(arg1 []string) ([]apihelper.Service, error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getServicesMutex.Lock()
	ret, specificReturn := fake.getServicesReturnsOnCall[len(fake.getServicesArgsForCall)]
	fake.getServicesArgsForCall = append(fake.getServicesArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	fake.recordInvocation("GetServices", []interface{}{arg1Copy})
	fake.getServicesMutex.Unlock()
	if fake.GetServicesStub != nil {
		return fake.GetServicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServicesReturns.result1, fake.getServicesReturns.result2
}

func (fake *FakeCFAPIHelper) GetServicesCallCount() int {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	return len(fake.getServicesArgsForCall)
}

func (fake *FakeCFAPIHelper) GetServicesArgsForCall(i int) []string {
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	return fake.getServicesArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetServicesReturns(result1 []apihelper.Service, result2 error) {
	fake.GetServicesStub = nil
	fake.getServicesReturns = struct {
		result1 []apihelper.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetServicesReturnsOnCall(i int, result1 []apihelper.Service, result2 error) {
	fake.GetServicesStub = nil
	if fake.getServicesReturnsOnCall == nil {
		fake.getServicesReturnsOnCall = make(map[int]struct {
			result1 []apihelper.Service
			result2 error
		})
	}
	fake.getServicesReturnsOnCall[i] = struct {
		result1 []apihelper.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetServicePlans(arg1 string) ([]apihelper.ServicePlan, error) {
	fake.getServicePlansMutex.Lock()
	ret, specificReturn := fake.getServicePlansReturnsOnCall[len(fake.getServicePlansArgsForCall)]
	fake.getServicePlansArgsForCall = append(fake.getServicePlansArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServicePlans", []interface{}{arg1})
	fake.getServicePlansMutex.Unlock()
	if fake.GetServicePlansStub != nil {
		return fake.GetServicePlansStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServicePlansReturns.result1, fake.getServicePlansReturns.result2
}

func (fake *FakeCFAPIHelper) GetServicePlansCallCount() int {
	fake.getServicePlansMutex.RLock()
	defer fake.getServicePlansMutex.RUnlock()
	return len(fake.getServicePlansArgsForCall)
}

func (fake *FakeCFAPIHelper) GetServicePlansArgsForCall(i int) string {
	fake.getServicePlansMutex.RLock()
	defer fake.getServicePlansMutex.RUnlock()
	return fake.getServicePlansArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetServicePlansReturns(result1 []apihelper.ServicePlan, result2 error) {
	fake.GetServicePlansStub = nil
	fake.getServicePlansReturns = struct {
		result1 []apihelper.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetServicePlansReturnsOnCall(i int, result1 []apihelper.ServicePlan, result2 error) {
	fake.GetServicePlansStub = nil
	if fake.getServicePlansReturnsOnCall == nil {
		fake.getServicePlansReturnsOnCall = make(map[int]struct {
			result1 []apihelper.ServicePlan
			result2 error
		})
	}
	fake.getServicePlansReturnsOnCall[i] = struct {
		result1 []apihelper.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetSpaceServiceInstances(arg1 string) ([]apihelper.ServiceInstance, error) {
	fake.getSpaceServiceInstancesMutex.Lock()
	ret, specificReturn := fake.getSpaceServiceInstancesReturnsOnCall[len(fake.getSpaceServiceInstancesArgsForCall)]
	fake.getSpaceServiceInstancesArgsForCall = append(fake.getSpaceServiceInstancesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceServiceInstances", []interface{}{arg1})
	fake.getSpaceServiceInstancesMutex.Unlock()
	if fake.GetSpaceServiceInstancesStub != nil {
		return fake.GetSpaceServiceInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSpaceServiceInstancesReturns.result1, fake.getSpaceServiceInstancesReturns.result2
}

func (fake *FakeCFAPIHelper) GetSpaceServiceInstancesCallCount() int {
	fake.getSpaceServiceInstancesMutex.RLock()
	defer fake.getSpaceServiceInstancesMutex.RUnlock()
	return len(fake.getSpaceServiceInstancesArgsForCall)
}

func (fake *FakeCFAPIHelper) GetSpaceServiceInstancesArgsForCall(i int) string {
	fake.getSpaceServiceInstancesMutex.RLock()
	defer fake.getSpaceServiceInstancesMutex.RUnlock()
	return fake.getSpaceServiceInstancesArgsForCall[i].arg1
}

func (fake *FakeCFAPIHelper) GetSpaceServiceInstancesReturns(result1 []apihelper.ServiceInstance, result2 error) {
	fake.GetSpaceServiceInstancesStub = nil
	fake.getSpaceServiceInstancesReturns = struct {
		result1 []apihelper.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) GetSpaceServiceInstancesReturnsOnCall(i int, result1 []apihelper.ServiceInstance, result2 error) {
	fake.GetSpaceServiceInstancesStub = nil
	if fake.getSpaceServiceInstancesReturnsOnCall == nil {
		fake.getSpaceServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []apihelper.ServiceInstance
			result2 error
		})
	}
	fake.getSpaceServiceInstancesReturnsOnCall[i] = struct {
		result1 []apihelper.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFAPIHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getOrgsMutex.RLock()
	defer fake.getOrgsMutex.RUnlock()
	fake.getOrgMutex.RLock()
	defer fake.getOrgMutex.RUnlock()
	fake.getQuotaMemoryLimitMutex.RLock()
	defer fake.getQuotaMemoryLimitMutex.RUnlock()
	fake.getOrgMemoryUsageMutex.RLock()
	defer fake.getOrgMemoryUsageMutex.RUnlock()
	fake.getOrgSpacesMutex.RLock()
	defer fake.getOrgSpacesMutex.RUnlock()
	fake.getSpaceAppsMutex.RLock()
	defer fake.getSpaceAppsMutex.RUnlock()
	fake.getServicesMutex.RLock()
	defer fake.getServicesMutex.RUnlock()
	fake.getServicePlansMutex.RLock()
	defer fake.getServicePlansMutex.RUnlock()
	fake.getSpaceServiceInstancesMutex.RLock()
	defer fake.getSpaceServiceInstancesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFAPIHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ apihelper.CFAPIHelper = new(FakeCFAPIHelper)
